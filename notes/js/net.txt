应用层 HTTP DNS
传输层 TCP UDP
网络层 IP 协议  ARP协议
------------------------------------------------------------
DNS 域名 -> ip  （域名和ip的mapping 缓存）
    从右向左 递归解析
    1. 域名被解析过， 直接返回， 缓存在路由器 本地的配置文件（host）， 先查找 host，在查找路由器
    2. 如果没有被解析过，域名 -> 自己配置的DNS服务器（可选前提是配置了） —> 路由器（内置DNS） -> 跟服务器（如果没有缓存过）-> 自右向左 层层向跟服务器请求，跟服务器返回ip，然后缓存到路由器中

DNS 解析 基于udp 所以快（没有三次 四次）,而且会缓存
--------------------------------------------------------------
http 基于tcp
udp 无连接 不关心丢数据  结构简单 适合传输小的数据
tcp 传输控制协议 可靠 面向连接 三次握手 双向传播
tcp 结构 0-31 32位 ， 最大60个字节

[syn 握手 ack 应答 fin 完成 push 发送数据]
三次握手 1. 客户端和服务端主动握手 [SYN] client -> server
	 2. 服务端应答后和客户端握手 [SYN ACK] (合二为一)   server -> client
         3. 客户端应答 [ACK]   client -> server 
为了确认 客户端和服务端可以互相通信

四次挥手 1. 我们离婚吧  [FIN, ACK] server -> client 
         2. 短信我收到了 [ACK]     client -> server
         3. 把我说的话说完，我们分手吧 [FIN, ACK]   client -> server 
         4. 行 [ACK] server -> cilent
可能有一些数据没有推送完，所以是四次

发送数据  client -> [PSH, ACK] (push 发送数据)
          server -> [ACK]
          server -> [PSH, ACK]
          client -> [ACK]
--------------------------------------------
窗口协商（滑动窗口）
数据缓存区 client server 都有各自的滑动窗口，会根据网络状况调整发送数据的多少
我们发送数据的时候是乱序的（需要自己重组），当当我们收到某个包后，此时需要等待前面序号的包到了才可以滑动（对头阻塞）
服务器会和客户端说明发送的数据个数
服务器收到客户端的数据后，会给客户端一个响应
如果某个数据一致没有回到服务器端，（丢包）则重新发送（超时重传）
当接收方的缓冲区收满，需要每隔一段时间，发送方每个一段时间来发送一个探测包，来询问窗口的大小，
或者上层协议消耗了接收方的数据，接收方也会主动通知发送方调整窗口，继续发送数据

滑动窗口保证接收方的接受能力来发送数据， 流量控制
-------------------------------------------
tcp 粘包 
每发一个包都会加20个字节的头（包一般最大位1460个，太大了会拆包）
nagle 算法 任意时刻内，最多只能有一个未被确认的小段
cork  算法 当达到max segment size 值时统一进行发送（相当于多个小宝合成一个大包）（粘包）
--------------------------------------------
seq number  window
seq ack 都是1 说明握手完成
seq + len 来保证有序
ack = seq + len
seq + len 永远是对方的ack

链接 和 断开都是 ack seq 同时 + 1
---------------------------------------------
udp
保存两边的端口号
tcp 面向链接

可以基于udp 实现可靠的链接
--------------------------------------------
tcp 拥塞处理
问题 1.对头处理
     2.在非长连接的情况下会有大量端口被占用
     3.tcp 会经过一个慢启动过程（开一个拥塞窗口，探测什么时候被堵塞（2 4 8 指数增长） 刚开始是指数增长，（长得慢了之后）后面是线性增长）
       可以采用快重传的机制

1. 滑动窗口 控制传输速度
2. 粘包
3. 阻塞处理 快恢复， 恢复到以前的一半
---------------------------------------------
http 1.1 304 缓存  不能压缩请求头，只能压缩请求体
http 2   hpack 压缩http 头 ， 二进制传输数据 （多路复用，一条tcp链接进行通信） 
http 3   基于udp + quic协议 保证可靠
---------------------------------------------
http1.1 
基于tcp
半双工（请求应答模式）
无状态
安全性不好 -> https
tcp 规范
请求行  相应行
请求头  响应头
请求体  响应体 (内容协商)
实现了 长链接 keep alive 必须在一次请求应答完成后复用
http1.1 对头阻塞
chrome 每个域名 可以并发6个tcp 通道（域名分片，不宜过多）
http 缓存  
强制缓存 客户端访问服务器后，缓存（有一个时间 expire time）
http1.1 用 cache-control 替换掉了 max-age

协商缓存 cache-control，当强制缓存失效后，会再次向服务器发起请求，服务器会比较缓存中的资源和服务器的资源是否一致，
如果一致 返回304 ， 用缓存，如果文件更新了，则从服务器返回资源 返回200 （server -> last modified   client -> if modified since）
服务器端再去看这个时间内是否有更新(时间精确到秒)

用etag 更精确 （md5 不同内容md5 肯定不同，内容相同 肯定相同）， 比对 来回的签名 （etag - if-none-match）
no-cache  不缓存，但是缓存中存在，每次向服务器请求
no-store  真正的不缓存
----------------------------------------------------------------------



    